
-----------------------------
-- pname.source
-- author1: Yinghong Zhong(z5233608)
-- author2: Shaowei Ma(z5238010)
-- version:2.0 (3-18)
-- course: COMP9315
-- Item: Assignment1
-----------------------------

CREATE FUNCTION pname_in(cstring)
   RETURNS PersonName
   AS '_OBJWD_/pname'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_out(PersonName)
   RETURNS cstring
   AS '_OBJWD_/pname'
   LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE PersonName (
   internallength = variable,
   input = pname_in,
   output = pname_out
);


-----------------------------
-- Interfacing New Types with Indexes:
--	We cannot define a secondary index (eg. a B-tree) over the new type
--	yet. We need to create all the required operators and support
--      functions, then we can make the operator class.
-----------------------------

-- define the required operators
CREATE FUNCTION pname_less(PersonName, PersonName) RETURNS bool
	AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION pname_less_equal(PersonName, PersonName) RETURNS bool
	AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION pname_equal(PersonName, PersonName) RETURNS bool
	AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION pname_not_equal(PersonName, PersonName) RETURNS bool
	AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION pname_greater(PersonName, PersonName) RETURNS bool
	AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION pname_greater_equal(PersonName, PersonName) RETURNS bool
	AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;


CREATE OPERATOR < (
	leftarg = PersonName, rightarg = PersonName, procedure = pname_less,
	commutator = > , negator = >= ,
	restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
	leftarg = PersonName, rightarg = PersonName, procedure = pname_less_equal,
	commutator = >= , negator = > ,
	restrict = scalarlesel, join = scalarlejoinsel
);
CREATE OPERATOR = (
	leftarg = PersonName, rightarg = PersonName, procedure = pname_equal,
	commutator = = ,
	negator = <> ,
	restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR <> (
	leftarg = PersonName, rightarg = PersonName, procedure = pname_not_equal,
	commutator = <> ,
	negator = = ,
	restrict = neqsel, join = neqjoinsel  --???
);
CREATE OPERATOR > (
	leftarg = PersonName, rightarg = PersonName, procedure = pname_greater,
	commutator = < , negator = <= ,
	restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR >= (
	leftarg = PersonName, rightarg = PersonName, procedure = pname_greater_equal,
	commutator = <= , negator = < ,
	restrict = scalargesel, join = scalargejoinsel
);


-- create the support function
CREATE FUNCTION pname_cmp(PersonName, PersonName) RETURNS int4
   AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION family(PersonName) RETURNS text
	AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION given(PersonName) RETURNS text
	AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION show(PersonName) RETURNS text
	AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION pname_hash(PersonName) RETURNS int4
	AS '_OBJWD_/pname' LANGUAGE C IMMUTABLE STRICT;


-- make the operator class  
CREATE OPERATOR CLASS pname_abs_ops 
    DEFAULT FOR TYPE PersonName USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       pname_cmp(PersonName, PersonName);

CREATE OPERATOR CLASS pname_hash_ops
    DEFAULT FOR TYPE PersonName USING hash AS
        OPERATOR        1       = , 
        FUNCTION        1       pname_hash(PersonName);